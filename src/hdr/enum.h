#ifndef ENUM_H
#define ENUM_H

#include <stdbool.h>


enum COLOUR_PAIR
{
    COLOUR_PAIR_RED = 1,
    COLOUR_PAIR_GREEN,
    COLOUR_PAIR_YELLOW,
    COLOUR_PAIR_BLUE,
    COLOUR_PAIR_MAGENTA,
    COLOUR_PAIR_CYAN,
    COLOUR_PAIR_WHITE,
    COLOUR_PAIR_RIVER,
    COLOUR_PAIR_ROAD,
    COLOUR_PAIR_WATER_BASE,
    COLOUR_PAIR_MOUNTAINS_BASE,
    COLOUR_PAIR_PLAINS_BASE,
    COLOUR_PAIR_PLAINS_TREE,
    COLOUR_PAIR_PLAINS_FLOWER,
    COLOUR_PAIR_HILLS_BASE,
    COLOUR_PAIR_HILLS_TREE,
    COLOUR_PAIR_FOREST_BASE,
    COLOUR_PAIR_DESERT_BASE,
    COLOUR_PAIR_JUNGLE_BASE,
    COLOUR_PAIR_SWAMP_BASE,
    COLOUR_PAIR_SWAMP_REED,
    COLOUR_PAIR_SWAMP_FLOWER,
    COLOUR_PAIR_TUNDRA_BASE,
    COLOUR_PAIR_TUNDRA_ROCK,
    COLOUR_PAIR_TUNDRA_WATER,
};

void colour_initialise(void);


#define NUM_UI_PANELS 9
enum UI_PANEL
{
    PANEL_SPLASH,
    PANEL_DETAIL,
    PANEL_HINT,
    PANEL_NAVIGATE,
    PANEL_TERRAIN,
    PANEL_ROAD,
    PANEL_RIVER,
    PANEL_LOCATION,
    PANEL_COMMAND,
    PANEL_NONE,
};


enum MODE
{
    MODE_CAPTURE,
    MODE_NAVIGATE,
    MODE_TERRAIN,
    MODE_AWAIT_TERRAIN,
    MODE_ROAD,
    MODE_AWAIT_ROAD,
    MODE_RIVER,
    MODE_AWAIT_RIVER,
    MODE_LOCATION,
    MODE_AWAIT_LOCATION,
    MODE_COMMAND,
    MODE_NONE,
};

const char *mode_name(enum MODE m);
int mode_colour(enum MODE m);
bool mode_is_await(enum MODE m);
enum UI_PANEL mode_panel(enum MODE m);


#define NUM_TERRAIN 9
#define NUM_TERRAIN_CHOPTS 24
enum TERRAIN
{
    TERRAIN_NONE,
    TERRAIN_UNKNOWN,
    TERRAIN_WATER,
    TERRAIN_MOUNTAINS,
    TERRAIN_PLAINS,
    TERRAIN_HILLS,
    TERRAIN_FOREST,
    TERRAIN_DESERT,
    TERRAIN_JUNGLE,
    TERRAIN_SWAMP,
    TERRAIN_TUNDRA
};
const char *terrain_name(enum TERRAIN t);
const char *terrain_chopts(enum TERRAIN t);
int terrain_colour(enum TERRAIN t, char c);
bool terrain_impassable(enum TERRAIN t);
const char *terrain_statusline(void);


enum LOCATION
{
    LOCATION_NONE,
    LOCATION_SETTLEMENT,
    LOCATION_FEATURE,
    LOCATION_DUNGEON
};


#define NUM_DIRECTIONS 6
enum DIRECTION
{
    DIRECTION_EE,
    DIRECTION_NE,
    DIRECTION_NW,
    DIRECTION_WW,
    DIRECTION_SW,
    DIRECTION_SE,
    DIRECTION_XX
};

enum DIRECTION direction_opposite(enum DIRECTION d);
enum DIRECTION direction_next(enum DIRECTION d);
enum DIRECTION direction_prev(enum DIRECTION d);


#define NUM_CHILDREN 9
enum CHILDREN
{
    CHILD0,
    CHILD1,
    CHILD2,
    CHILD3,
    CHILD4,
    CHILD5,
    CHILD6,
    CHILD7,
    CHILD8
};


enum COMMAND
{
    COMMAND_NONE,
    COMMAND_ERROR,
    COMMAND_QUIT,
    COMMAND_WRITE,
    COMMAND_EDIT,
};

const char *command_str(enum COMMAND c);


enum STATUS
{
    STATUS_OK,
    STATUS_SUCCESS_WRITE,
    STATUS_SUCCESS_EDIT_NEW,
    STATUS_SUCCESS_EDIT_OLD,
    STATUS_ERROR_WRITE,
    STATUS_ERROR_EDIT,
};

const char *status_string(enum STATUS s);

#endif
